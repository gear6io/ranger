name: CI

on:
  push:
    branches: ["master"]
  pull_request:
    branches: ["master"]
  workflow_dispatch:

env:
  GO_VERSION: "1.24"

jobs:
  test:
    name: Test
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        go-version: ["1.24"]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.go-version }}
          cache: true

      - name: Download dependencies
        run: go mod download

      - name: Verify dependencies
        run: go mod verify

      - name: Run all tests
        run: |
          echo "Running tests for all packages..."
          go test -v -race ./... 2>&1 | tee test-output.log
        continue-on-error: true

      - name: Generate test summary
        run: |
          echo "=== TEST SUMMARY ==="
          echo "Packages with test failures:"
          go test ./... 2>&1 | grep -E "(FAIL|exit status)" | head -20 || echo "No test failures found"
          echo "==================="
        continue-on-error: true

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-${{ runner.os }}
          path: test-output.log
          retention-days: 7

  quality:
    name: Code Quality
    runs-on: ubuntu-latest
    needs: [test]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Install golangci-lint
        run: |
          curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin v1.55.2

      - name: Run golangci-lint
        run: |
          golangci-lint run --timeout=5m --out-format=github-actions

      - name: Check code formatting
        run: |
          if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
            echo "Code is not formatted. Please run 'go fmt ./...'"
            gofmt -s -l .
            exit 1
          fi

      - name: Run go vet
        run: go vet ./...

      - name: Check for unused dependencies
        run: |
          go mod tidy
          if [ -n "$(git status --porcelain go.mod go.sum)" ]; then
            echo "go.mod or go.sum has uncommitted changes"
            git diff go.mod go.sum
            exit 1
          fi

      - name: Run pre-commit checks
        run: make pre-commit

  build:
    name: Build
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Build all binaries
        run: make build-all

      - name: Test binary execution
        run: |
          echo "Testing binary execution..."
          ./icebox-server --help || echo "icebox-server help failed"
          ./icebox-client --help || echo "icebox-client help failed"

  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [test, build]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Download dependencies
        run: go mod download

      - name: Run integration tests
        run: make test-integration
        continue-on-error: true
        env:
          ICEBOX_INTEGRATION_TESTS: "true"

      - name: Upload integration test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: integration-test-results
          path: test-output.log
          retention-days: 7

  coverage:
    name: Test Coverage
    runs-on: ubuntu-latest
    needs: [test]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Generate coverage report
        run: |
          echo "Generating coverage report..."
          go test -coverprofile=coverage.out -covermode=atomic ./...
          
          # Generate HTML coverage report
          go tool cover -html=coverage.out -o coverage.html
          
          # Show coverage summary
          go tool cover -func=coverage.out

      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        with:
          name: coverage-reports
          path: |
            coverage.out
            coverage.html
          retention-days: 30

  validate:
    name: Validate
    runs-on: ubuntu-latest
    needs: [test, build, integration-test, quality]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Validate go.mod and go.sum
        run: make mod-verify

      - name: Check for uncommitted changes
        run: |
          if [ -n "$(git status --porcelain)" ]; then
            echo "There are uncommitted changes:"
            git status --porcelain
            exit 1
          fi

      - name: Validate configuration files
        run: |
          echo "Validating configuration files..."
          if [ -f "icebox-server.yml" ]; then
            echo "✅ icebox-server.yml exists"
          else
            echo "❌ icebox-server.yml missing"
            exit 1
          fi
